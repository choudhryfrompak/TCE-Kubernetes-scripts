set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to verify pod status
verify_pods() {
    local namespace=$1
    local label=$2
    local timeout=$3
    local start_time=$(date +%s)
    local end_time=$((start_time + timeout))

    while true; do
        local current_time=$(date +%s)
        if [ $current_time -gt $end_time ]; then
            log_warn "Timeout waiting for pods with label $label in namespace $namespace"
            log_info "Continuing anyway - please check pod status manually"
            return 0
        fi

        local not_ready=0
        while IFS= read -r pod_status; do
            if [[ $pod_status != "Running" && $pod_status != "" ]]; then
                not_ready=1
                break
            fi
        done < <(kubectl get pods -n $namespace -l $label -o jsonpath='{.items[*].status.phase}')

        if [ $not_ready -eq 0 ]; then
            log_info "All pods with label $label in namespace $namespace are running"
            return 0
        fi

        log_warn "Waiting for pods with label $label in namespace $namespace..."
        sleep 10
    done
}

# Function to verify endpoint availability
verify_endpoint() {
    local endpoint=$1
    local max_attempts=$2
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$endpoint" &>/dev/null; then
            log_info "Endpoint $endpoint is available"
            return 0
        fi
        log_warn "Attempt $attempt/$max_attempts: Endpoint $endpoint not yet available. Waiting..."
        sleep 10
        ((attempt++))
    done
    
    log_error "Endpoint $endpoint failed to become available"
    return 1
}

# Function to check Prometheus components
check_prometheus_components() {
    local namespace=$1
    
    log_info "Checking Prometheus components status..."
    
    # List all pods and their status
    kubectl get pods -n $namespace -o wide
    
    # Check for any pods in CrashLoopBackOff or Error state
    local problem_pods=$(kubectl get pods -n $namespace | grep -E 'CrashLoopBackOff|Error' || true)
    if [ ! -z "$problem_pods" ]; then
        log_warn "Found pods in problematic state:"
        echo "$problem_pods"
    fi
}

# Create DCGM values file
cat << EOF > dcgm-values.yaml
serviceMonitor:
  enabled: true
tolerations:
  - operator: "Exists"
EOF

# Get Grafana password
read -p "Enter Grafana admin password [prom-operator]: " grafana_password
grafana_password=${grafana_password:-prom-operator}

read -p "Enter pod wait timeout in seconds [600]: " pod_timeout
pod_timeout=${pod_timeout:-600}

# Create Prometheus values file
cat << EOF > prometheus-values.yaml
prometheus-node-exporter:
  tolerations:
    - operator: "Exists"
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  podManagementPolicy: Parallel
  
grafana:
  adminPassword: "$grafana_password"
  service:
    type: NodePort
EOF

# First clean up any existing installations
log_info "Cleaning up any existing installations..."

# Remove DCGM exporter if it exists
if helm list | grep -q "dcgm-exporter"; then
    log_info "Removing existing DCGM exporter..."
    helm uninstall dcgm-exporter || true
    sleep 10
fi

# Remove Prometheus stack if it exists
if helm list -n prometheus | grep -q "kube-prometheus-stack"; then
    log_info "Removing existing Prometheus stack..."
    helm uninstall kube-prometheus-stack -n prometheus || true
    sleep 10
fi

# Delete the prometheus namespace if it exists
kubectl delete namespace prometheus --timeout=30s 2>/dev/null || true
sleep 10

# Add and update Helm repositories
log_info "Adding and updating Helm repositories..."
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
helm repo add gpu-helm-charts https://nvidia.github.io/dcgm-exporter/helm-charts || true
helm repo update

# Create prometheus namespace
log_info "Creating prometheus namespace..."
kubectl create namespace prometheus

# Install Prometheus stack
log_info "Installing Prometheus stack..."
helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
    --namespace prometheus \
    -f prometheus-values.yaml \
    --timeout ${pod_timeout}s \
    --wait

# Wait for Prometheus pods
log_info "Waiting for Prometheus pods to be ready..."
sleep 30

# Verify Prometheus components
verify_pods "prometheus" "app.kubernetes.io/instance=kube-prometheus-stack" $pod_timeout
check_prometheus_components "prometheus"

# Install DCGM exporter
log_info "Installing DCGM exporter..."
helm install dcgm-exporter gpu-helm-charts/dcgm-exporter \
    -f dcgm-values.yaml \
    --wait

# Wait for DCGM exporter
log_info "Waiting for DCGM exporter to be ready..."
sleep 20

# Verify DCGM exporter
verify_pods "default" "app.kubernetes.io/name=dcgm-exporter" $pod_timeout

# Get node IP and ports
NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
GRAFANA_PORT=$(kubectl get svc -n prometheus | grep grafana | awk '{print $5}' | cut -d':' -f2 | cut -d'/' -f1)

# Verify endpoints
log_info "Verifying endpoints..."
GRAFANA_ENDPOINT="http://${NODE_IP}:${GRAFANA_PORT}"

verify_endpoint "${GRAFANA_ENDPOINT}/api/health" 12 || log_warn "Grafana endpoint verification failed"

# Final output
cat << EOF

ðŸ“Š Telemetry Setup Complete! ðŸ“Š

Endpoints:
- Grafana: ${GRAFANA_ENDPOINT}

Grafana Credentials:
- Username: admin
- Password: ${grafana_password}

To access Grafana dashboards:
1. Open ${GRAFANA_ENDPOINT}
2. Log in with the credentials above
3. Go to Dashboards -> Browse to view GPU metrics

Current pod status:
EOF

# Show pod status
log_info "Prometheus pods:"
kubectl get pods -n prometheus
log_info "DCGM exporter pods:"
kubectl get pods -n default | grep dcgm

# Show any warnings or errors from pod logs if there were issues
log_info "Recent events:"
kubectl get events -n prometheus --sort-by='.lastTimestamp' | tail -n 20